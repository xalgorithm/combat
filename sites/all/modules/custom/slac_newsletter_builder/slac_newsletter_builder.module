<?php

/**
 * Content type that will be used for newsletter.
 */
define('NEWSLETTER_CONTENT_TYPE', 'slac_news');

/**
 * Implements hook_menu().
 */
function slac_newsletter_builder_menu() {
  $items['newsletter-builder'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('newletter_builder_form'),
    'access arguments' => array('access newsletter builder'),
    'type' => MENU_CALLBACK,
  );
  $items['newsletter-builder/autocomplete'] = array(
    'title' => t('Newsletter autocomplete'),
    'page callback' => 'slac_newsletter_builder_select_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function slac_newsletter_builder_permission() {
  return array(
    'access newsletter builder' => array(
      'title' => t('Access newletter builder'),
      'description' => t('Allow to use newletter builder.'),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function slac_newsletter_builder_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['newsletter_main_article'] = array(
    'label' => t('Newsletter main article'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['newsletter_secondary_article'] = array(
    'label' => t('Newsletter secondary article'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function slac_newsletter_builder_field_formatter_info() {
  return array(
    'newsletter_main_article' => array(
      'label' => t('Newsletter main'),
      'field types' => array('file', 'media'),
      'settings' => array(
        'file_view_mode' => 'newsletter_main_article',
      ),
    ),
    'newsletter_secondary_article' => array(
      'label' => t('Newsletter secondary'),
      'field types' => array('file', 'media'),
      'settings' => array(
        'file_view_mode' => 'newsletter_secondary_article',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function slac_newsletter_builder_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] != 'newsletter_main_article' && $display['type'] != 'newsletter_secondary_article') {
    return $element;
  }

  foreach ($items as $delta => $item) {
    if (isset($item['file']->type) && $item['file']->type == 'image') {

      // Set up the settings array with your image style
      $display['settings']['image_style'] = $display['type'];
      $display['settings']['title'] = $item['file']->title;
      $display['settings']['alt'] = $item['file']->alt;

      $element = file_entity_file_formatter_file_image_view($item['file'], $display, LANGUAGE_NONE);
    }
  }

  return $element;
}

/**
 * Implements hook_image_default_styles().
 */
function slac_newsletter_builder_image_default_styles() {
  $styles = array();

  // Exported image style: newsletter_main_article_style.
  $styles['newsletter_main_article'] = array(
    'name' => 'newsletter_main_article',
    'effects' => array(
      1 => array(
        'label' => 'EPSA Image Crop',
        'help' => '',
        'dimensions callback' => 'epsacrop_crop_dimensions',
        'effect callback' => 'epsacrop_crop_image',
        'form callback' => 'epsacrop_crop_image_form',
        'module' => 'epsacrop',
        'name' => 'epsacrop_crop',
        'data' => array(
          'width' => 215,
          'height' => 150,
          'anchor' => 'center-center',
          'jcrop_settings' => array(
            'aspect_ratio' => '',
            'bgcolor' => 'black',
            'bgopacity' => 0.6,
            'fallback' => 0,
          ),
        ),
        'weight' => 1,
      ),
      2 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 215,
          'height' => 150,
        ),
        'weight' => 2,
      ),
    ),
    'label' => 'newsletter_main_article',
  );

  // Exported image style: newsletter_secondary_article_style.
  $styles['newsletter_secondary_article'] = array(
    'name' => 'newsletter_secondary_article',
    'effects' => array(
      3 => array(
        'label' => 'EPSA Image Crop',
        'help' => '',
        'dimensions callback' => 'epsacrop_crop_dimensions',
        'effect callback' => 'epsacrop_crop_image',
        'form callback' => 'epsacrop_crop_image_form',
        'module' => 'epsacrop',
        'name' => 'epsacrop_crop',
        'data' => array(
          'width' => 150,
          'height' => 122,
          'anchor' => 'center-center',
          'jcrop_settings' => array(
            'aspect_ratio' => '',
            'bgcolor' => 'black',
            'bgopacity' => 0.6,
            'fallback' => 0,
          ),
        ),
        'weight' => 1,
      ),
      4 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 150,
          'height' => 122,
        ),
        'weight' => 2,
      ),
    ),
    'label' => 'newsletter_secondary_article',
  );

  return $styles;
}

/**
 * Implements hook_preprocess_node().
 *
 * Add custom templates for view modes.
 */
function slac_newsletter_builder_preprocess_node(&$variables) {
  if($variables['view_mode'] == 'newsletter_main_article' || $variables['view_mode'] == 'newsletter_secondary_article') {
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['type'] . '__' . $variables['view_mode'];
  }
}

/**
 * Implements hook_admin_menu_output_alter().
 */
function slac_newsletter_builder_admin_menu_output_alter(&$content) {
  if (user_access('access newsletter builder')) {
    $content['menu']['11'] = array(
      '#title' => t('Newletter builder'),
      '#href' => 'newsletter-builder',
      '#weight' => 0,
    );
  }
}

/**
 * Main builder form.
 *
 * @param type $form
 * @param type $form_state
 */
function newletter_builder_form($form, &$form_state) {

  $form['page_title'] = array(
    '#markup' => '<h2>' . t('Newletter builder') . '</h2>',
  );

  $form['main_article'] = array(
    '#title' => t('Main article'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['values']['main_article']) ? : '',
    '#autocomplete_path' => 'newsletter-builder/autocomplete',
    '#ajax' => array(
      'callback' => 'slac_newsletter_builder_set_nid',
    ),
  );
  $number_secondary_articles = isset($form_state['values']['number_secondary_articles']) ? $form_state['values']['number_secondary_articles'] : 2;
  $form['number_secondary_articles'] = array(
    '#title' => t('Number of secondary articles'),
    '#type' => 'select',
    '#options' => range(0, 15),
    '#default_value' => $number_secondary_articles,
    '#ajax' => array(
      'callback' => 'slac_newsletter_builder_set_number_secondary_articles',
      'method' => 'replace',
      'wrapper' => 'edit-secondary-articles-wrapper',
    ),
  );

  $form['secondary_articles'] = array(
    '#title' => t('Secondary articles'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => TRUE,
    '#prefix' => '<div id="edit-secondary-articles-wrapper">',
    '#suffix' => '</div>',
  );

  $form['results'] = array(
    '#title' => t('Newsletter Results'),
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="edit-newsletter-results-wrapper">',
    '#suffix' => '</div>',
  );

  $form['results']['newsletter_results'] = array(
    '#title' => '',
    '#type' => 'textarea',
    '#rows' => 10,
    '#default_value' => isset($form_state['results']['newsletter_results']) ? : '',
  );

  for ($i = 0; $i < $number_secondary_articles; $i++) {
    $form['secondary_articles']['article_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => isset($form_state['values']['article_' . $i]) ? : '',
      '#autocomplete_path' => 'newsletter-builder/autocomplete',
    );
  }

  drupal_add_js(drupal_get_path('module', 'slac_newsletter_builder') . '/js/slac_newsletter_builder.js');

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'slac_newletter_builder_ajax_callback',
    ),
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'slac_newsletter_builder') . '/js/slac_newsletter_builder.js';

  return $form;
}

function slac_newletter_builder_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (isset($values['content_types_fieldset']['content_types'])) {
    $options_count = 0;
    foreach($values['content_types_fieldset']['content_types'] as $key => $value) {
      if ($value != '0') {
        $options_count++;
      }
    }
    if ($options_count < 1) {
      form_set_error('content_types_fieldset', t('You must specify at least one content type.'));
    }
  }
}

function slac_newletter_builder_ajax_callback($form, &$form_state) {
  $nids = array();
  $main_article_title = $form_state['values']['main_article'];
  $match = preg_match('/\[nid:\s(\d+)\]/', $main_article_title, $matches);
  if (isset($matches['1']) && is_numeric($matches['1'])) {
    $nids['main_article_nid'] = $matches['1'];
  }
  if (isset($form_state['values']['article_0'])) {
    $article_number = 0;
    foreach ($form_state['values'] as $key => $value) {
      if ($key == 'article_' . $article_number) {
        $match = preg_match('/\[nid:\s(\d+)\]/', $value, $matches);
        if (isset($matches['1']) && is_numeric($matches['1'])) {
          $nids[$key] = $matches['1'];
        }
        $article_number++;
      }
    }
  }

  $html = slac_newsletter_builder_generate_html($nids);
  $selector = '#edit-results-newsletter-results';

  $commands = array();
  $commands[] = ajax_command_invoke(NULL, "slac_newletter_builder_forms", array($selector, $html));
  $commands[] = ajax_command_html('#ajax-forms-messages', theme('status_messages'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function slac_newsletter_builder_set_number_secondary_articles($form, $form_state) {
  return $form['secondary_articles'];
}

function slac_newsletter_builder_select_content($string = '') {
  $result = db_select('node')
    ->fields('node', array('nid', 'title'))
    ->condition('title', db_like($string) . '%', 'LIKE')
    ->condition('type', NEWSLETTER_CONTENT_TYPE, '=')
    ->range(0, 10)
    ->execute();
  $matches = array();
  foreach($result as $item) {
    $matches[$item->title . ' [nid: ' . $item->nid . ']'] = check_plain($item->title);
  }

  drupal_json_output($matches);
  exit;
}

function slac_newsletter_builder_generate_html($nids = array()) {
  $output = '';
  slac_newsletter_builder_field_update_instance();
  foreach ($nids as $key => $nid) {
    $node = node_load($nid);
    if ($key == 'main_article_nid') {
      $view = node_view($node, 'newsletter_main_article');
    }
    else {
      $view = node_view($node, 'newsletter_secondary_article');
    }
    $rendered_node = drupal_render($view);
    $output .= $rendered_node;
  }
  return $output;
}

/**
 * Update specific fields instances.
 */
function slac_newsletter_builder_field_update_instance() {
  $bundle = NEWSLETTER_CONTENT_TYPE;
  $instance_info = field_info_instance('node', 'body', $bundle);
  if (isset($instance_info['display']['newsletter_main_article']['type'])
    && $instance_info['display']['newsletter_main_article']['type'] == 'hidden') {
    $instance_info['display']['newsletter_main_article'] = array(
      'label' => 'hidden',
      'module' => 'text',
      'settings' => array(
        'trim_length' => '1000',
      ),
      'type' => 'text_trimmed',
      'weight' => '3',
    );
    field_update_instance($instance_info);
  } elseif (isset($instance_info['display']['newsletter_secondary_article']['type'])
    && $instance_info['display']['newsletter_secondary_article']['type'] == 'hidden') {
    $instance_info['display']['newsletter_secondary_article'] = array(
      'label' => 'hidden',
      'module' => 'text',
      'settings' => array(
        'trim_length' => '600',
      ),
      'type' => 'text_summary_or_trimmed',
      'weight' => '3',
    );
    field_update_instance($instance_info);
  }

  if ($bundle == 'slac_news') {
    $instance_info = field_info_instance('node', 'field_slac_news_date', $bundle);
    if (isset($instance_info['display']['newsletter_main_article']['type'])
      && $instance_info['display']['newsletter_main_article']['type'] == 'hidden') {
      $instance_info['display']['newsletter_main_article'] = array(
        'label' => 'hidden',
        'module' => 'date',
        'settings' => array(
          'format_type' => 'mm_dd_yy',
        ),
        'type' => 'date_format',
        'weight' => '1',
      );
      field_update_instance($instance_info);
    } elseif (isset($instance_info['display']['newsletter_secondary_article']['type'])
      && $instance_info['display']['newsletter_secondary_article']['type'] == 'hidden') {
      $instance_info['display']['newsletter_secondary_article'] = array(
        'label' => 'hidden',
        'module' => 'date',
        'settings' => array(
          'format_type' => 'mm_dd_yy',
        ),
        'type' => 'date_format',
        'weight' => '1',
      );
      field_update_instance($instance_info);
    }

    $instance_info = field_info_instance('node', 'field_slac_news_media', $bundle);
    if (isset($instance_info['display']['newsletter_main_article']['type'])
      && $instance_info['display']['newsletter_main_article']['type'] == 'hidden') {
      $instance_info['display']['newsletter_main_article'] = array(
        'label' => 'hidden',
        'module' => 'slac_newsletter_builder',
        'settings' => array(
          'file_view_mode' => 'newsletter_main_article',
        ),
        'type' => 'newsletter_main_article',
        'weight' => '2',
      );
      field_update_instance($instance_info);
    } elseif (isset($instance_info['display']['newsletter_secondary_article']['type'])
      && $instance_info['display']['newsletter_secondary_article']['type'] == 'hidden') {
      $instance_info['display']['newsletter_secondary_article'] = array(
        'label' => 'hidden',
        'module' => 'slac_newsletter_builder',
        'settings' => array(
          'file_view_mode' => 'newsletter_secondary_article',
        ),
        'type' => 'newsletter_secondary_article',
        'weight' => '2',
      );
      field_update_instance($instance_info);
    }
  }
}

