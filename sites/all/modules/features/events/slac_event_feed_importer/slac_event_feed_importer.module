<?php
/**
 * @file
 * Code for the Slac feed event importer feature.
 */

include_once 'slac_event_feed_importer.features.inc';

/**
* Implements hook_feeds_parser_sources_alter().
*/
function slac_event_feed_importer_feeds_parser_sources_alter(&$sources, $content_type) {
	if ($content_type == 'event_feed') {
		$sources['field_published_items_feed'] = array(
			'name' => 'Feed Node: Published',
			'description' => 'Set item published',
			'callback' => 'feedmapper_slac_event_get_published_item_feed',
		);

		$sources['field_promoted_items_feed'] = array(
			'name' => 'Feed Node: Promoted',
			'description' => 'Set item promoted',
			'callback' => 'feedmapper_slac_event_get_promoted_item_feed',
		);
	}
}


function feedmapper_slac_event_get_published_item_feed(FeedsSource $source) {
	$nid = $source->feed_nid;
	$feed_importer = node_load($nid);
	return $feed_importer->field_published_items_feed['und'][0]['value'];
}

function feedmapper_slac_event_get_promoted_item_feed(FeedsSource $source) {
	$nid = $source->feed_nid;
	$feed_importer = node_load($nid);
	return $feed_importer->field_promoted_items_feed['und'][0]['value'];
}

/**
 * Implements hook_date_ical_import_post_parse_alter().
 *
 * Make sure "xprops" are passed along in the parsed data; they (and apparently
 * any other field we can't map in the GUI) are not by default.
 */
function slac_event_feed_importer_date_ical_import_post_parse_alter(&$parsed_data, $context) {
  foreach ($context['calendar']->components as $component) {
    if ($component instanceof vevent && $component->uid['value'] === $parsed_data['UID']) {
      foreach ($component->xprop as $name => $value) {
        $parsed_data[$name] = $value['value'];
      }
    }
  }
}

/**
 * Implements hook_feeds_presave().
 */
function slac_event_feed_importer_feeds_presave(FeedsSource $source, $entity, $item) {
  if (!empty($entity->type) && $entity->type === 'event' && isset($item['UID'])) {
    // Massage date data - even though the field mapping is in place, it's not
    // working. Perhaps because the incoming date fields are not in an expected
    // format.
    $date_info = array('date_type' => 'date');
    $date_info['timezone'] = empty($item['DTSTART']->timezone) ? 'America/Los_Angeles' : $item['DTSTART']->timezone;
    $date_info['timezone_db'] = $date_info['timezone'];
    $date_info['value'] = $item['DTSTART']->format(DATE_FORMAT_ISO);
    $date_info['value2'] = $item['DTEND']->format(DATE_FORMAT_ISO);
    $entity->field_slac_event_date[LANGUAGE_NONE][0] = $date_info;

    // Did we pass an image in the iCalendar data?
    if (!empty($item['X-IMG-UUID'])) {
      if ($files = entity_uuid_load('file', array($item['X-IMG-UUID']))) {
        $file = reset($files);
        $entity->field_event_image[LANGUAGE_NONE][0] = (array)$file;
      }
      elseif (!empty($item['X-IMG-URL'])) {
        $data = drupal_http_request($item['X-IMG-URL']);
        if ($data->code == 200) {
          $filename = basename(parse_url($item['X-IMG-URL'], PHP_URL_PATH));
          if ($file = file_save_data($data->data, file_default_scheme() . '://' . $filename)) {
            $file->uuid = $item['X-IMG-UUID'];
            file_save($file);
            $entity->field_event_image[LANGUAGE_NONE][0] = (array) $file;
          }
        }
      }
    }
    // Bypass content moderation workflow and just publish it!
    $entity->status = NODE_PUBLISHED;
    $entity->workbench_moderation_state_new = workbench_moderation_state_published();
  }
}
