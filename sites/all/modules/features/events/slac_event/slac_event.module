<?php

define('SLAC_EVENT_EVENTS_PAGE_URI', 'events');

/**
 * @file
 * Code for the Events Features feature.
 */

include_once 'slac_event.features.inc';
include_once 'slac_event.formatter.inc';

/**
 * Implements hook_menu().
 */
function slac_event_menu() {
  return array(
    'node/add/event-import' => array(
      'title' => 'Event import (single)',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('slac_event_import_single'),
      'access callback' => 'node_access',
      'access arguments' => array('create', 'event'),
    ),
  );
}

/**
 * Form callback for our new single event import form.
 */
function slac_event_import_single($form, $form_state) {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Event page URL'),
    '#description' => t('Paste in the URL of an event on a SLAC site.'),
    '#required' => TRUE,
    '#weight' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Form validator for our single event import form.
 *
 * @see slac_event_import_single()
 */
function slac_event_import_single_validate($form, &$form_state) {
  // Load the page.
  $page = drupal_http_request($form_state['values']['url']);
  if ($page->code <= 0) {
    form_set_error('url', t('This does not appear to be a valid URL.'));
    return;
  }
  elseif ($page->code != 200) {
    form_set_error('url', t('Loading the page at this URL failed. Error code @code (@error).', array('@code' => $page->code, '@error' => empty($page->error) ? '?' : $page->error)));
    return;
  }
  // XML parsing is easy to fail. I know it's "wrong," but use regex to find
  // our calendar link.
  if (!preg_match('/\<meta name="slac-event-data" content="([^"]+)"/', $page->data, $matches)) {
    form_set_error('url', t('Event information could not be found on the page.'));
    return;
  }
  $data = drupal_json_decode(decode_entities($matches[1]));
  if ($data === NULL) {
    form_set_error('url', t('Parsing the event information for this event failed.'));
    return;
  }
  $form_state['event'] = $data;
}

/**
 * Form submission function for our single event import form.
 *
 * @see slac_event_import_single()
 */
function slac_event_import_single_submit($form, &$form_state) {
  // Ideally, we could leverage already-configured stuff (mappings, etc) for
  // this, but I can't find a way to do so - it doesn't seem very modular.
  $node = new stdClass();
  $node->type = 'event';
  node_object_prepare($node);
  foreach (_slac_event_fields_to_export() as $field) {
    if (isset($form_state['event'][$field])) {
      // Special processing for imagesâ€¦
      if ($field === 'field_event_image') {
        $image_data = $form_state['event']['field_event_image'];
        foreach (array_keys($image_data) as $langcode) {
          foreach (array_keys($image_data[$langcode]) as $idx) {
            $image = $image_data[$langcode][$idx];
            if (isset($image['uuid'])) {
              // Can we load the file by UUID?
              if ($files = entity_uuid_load('file', array($image['uuid']))) {
                $file = reset($files);
                $node->field_event_image[$langcode][$idx] = (array) $file;
                drupal_set_message(t('Successfully re-used the file %file for the imported content.', array('%file' => $file->filename)));
              }
              else {
                // Okay, we have to download the file and save it as a new file.
                $data = drupal_http_request($image['url']);
                if ($data->code != 200) {
                  drupal_set_message(t('Failed downloading file at %file for the imported content.', array('%file' => $image['url'])), 'warning');
                }
                else {
                  if ($file = file_save_data($data->data, file_default_scheme() . '://' . $image['filename'])) {
                    foreach (array('field_file_image_alt_text', 'field_file_image_title_text', 'field_file_image_description') as $file_field) {
                      if (isset($image[$file_field])) {
                        $file->$file_field = $image[$file_field];
                      }
                    }
                    $file->uuid = $image['uuid'];
                    file_save($file);
                    $node->field_event_image[$langcode][$idx] = (array) $file;
                    drupal_set_message(t('Successfully imported the file %file for the imported content.', array('%file' => $image['filename'])));
                  }
                  else {
                    drupal_set_message(t('Failed saving file at %file for the imported content.', array('%file' => $image['url'])), 'warning');
                  }
                }
              }
            }
          }
          if (isset($form_state['event']['field_slac_event_link'])) {
            // Special handling for this.
            if (empty($form_state['event']['field_slac_event_link'])) {
              // Use the event page URL.
              drupal_set_message(t('The source event page did not have a redirect URL, so the URL of the event page itself is being used instead.'), 'warning');
              $form_state['event']['field_link'] = $form_state['values']['url'];
            }
            $node->field_slac_event_link = array(LANGUAGE_NONE => array(array('url' => $form_state['event']['field_link'])));
          }
        }
      }
      else {
        $node->{$field} = $form_state['event'][$field];
      }
    }
  }

  // Add an "external" tag to imported events.
  $term = slac_event_get_external_term();
  $node->field_event_tags[LANGUAGE_NONE][]['tid'] = $term->tid;

  node_save($node);
  // Let's redirect the user to the node edit form for the node we just created.
  $form_state['redirect'] = "node/{$node->nid}/edit";
  drupal_set_message(t('Event imported. Edit it below if necessary.'));
}

/**
 * Preprocess function for node template.
 */
function slac_event_preprocess_node(&$vars) {
  if ($vars['type'] != 'event' || $vars['view_mode'] != 'teaser') {
    return;
  }

  $vars['event_link'] = '';
  if (isset($vars['field_slac_event_link']['und'][0]['url'])) {
    $vars['event_link'] = $vars['field_slac_event_link']['und'][0]['url'];
  }

  $previous_event_year_month_day = &drupal_static(__FUNCTION__ . '-previous_event_year_month_day', '');
  $row_counter = &drupal_static(__FUNCTION__ . '-row_counter', 1);
  if (isset($vars['view']->result)) {
    $total_rows = count($vars['view']->result);
  }
  else {
    $total_rows = _taxonomy_term_count_nodes($vars['field_slac_event_category']['und'][0]['tid']);
  }

  $vars += array(
    'add_date_html_prefix' => FALSE,
    'add_date_html_suffix' => FALSE,
    'add_last_date_html_suffix' => FALSE,
  );

  $event_date = $vars['field_slac_event_date'][LANGUAGE_NONE][0]['value'];

  // Explode date value like 2013-12-24T22:00:00
  list($year_month_day, $time) = explode('T', $event_date);

  if ($year_month_day != $previous_event_year_month_day) {
    $vars['add_date_html_prefix'] = TRUE;
    if ($row_counter != 1) {
      $vars['add_date_html_suffix'] = TRUE;
    }
  }
  if ($row_counter == $total_rows) {
    $vars['add_last_date_html_suffix'] = TRUE;
  }

  $event_date_timestamp = strtotime($event_date);
  $vars['month'] = format_date($event_date_timestamp, 'custom', 'M');
  $vars['day'] = format_date($event_date_timestamp, 'custom', 'j');

  $event_date_end = $vars['field_slac_event_date'][LANGUAGE_NONE][0]['value2'];
  $event_date_end_timestamp = strtotime($event_date_end);

  $vars['period'] = t('All Day');
  if ($event_date != $event_date_end) {
    $vars['period'] = format_date($event_date_timestamp, 'custom', 'g:ia') . ' - ' . format_date($event_date_end_timestamp, 'custom', 'g:ia');
  }

  $vars['location'] = '';
  if (isset($vars['field_location'][LANGUAGE_NONE][0]['name'])) {
    $vars['location'] = ', ' . check_plain($vars['field_location'][LANGUAGE_NONE][0]['name']);
  }

  $previous_event_year_month_day = $year_month_day;
  $row_counter++;
}

/**
 * Preprocess function for event date and time field.
 */
function slac_preprocess_field (&$variables) {

  if (isset($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'field_slac_event_date') {

    $variables['items'][0]['#markup'] .= ' PST';
  }
}

/**
 * Count the number of nodes tagged with a term.
 */
function _taxonomy_term_count_nodes($tid, $type = 0) {
  static $count;

  if (isset($count[$type][$tid])) {
    return $count[$type][$tid];
  }

  $query = db_select('taxonomy_index', 't');
  $query->condition('tid', $tid, '=');
  $query->addExpression('COUNT(*)', 'count_nodes');


  // Restrict query by Content Type.
  if (!empty($type)) {
    $query->join('node', 'n', 't.nid = n.nid');
    $query->condition('type', $type, '=');
  }

  $count[$type][$tid] = $query->execute()->fetchField();

  return $count[$type][$tid];
}

/**
 * Preprocess for calendar datebox.
 */
function slac_event_process_calendar_datebox(&$vars) {
  $view = $vars['view'];
  if ($view->name != 'events' || $view->current_display != 'panel_pane_2') {
    return;
  }
  $link_class = '';
  if ($vars['date'] == _slac_event_get_date_from_event_node_with_day()) {
    $link_class = 'active';
  }
  $link = $vars['link'];
  $vars['link'] = l($vars['link'], SLAC_EVENT_EVENTS_PAGE_URI . '/' . $vars['date'], array('attributes' => array('class' => $link_class)));
  $vars['day'] = l($vars['day'], SLAC_EVENT_EVENTS_PAGE_URI . '/' . $vars['date'], array('attributes' => array('class' => $link_class)));
}

/**
 * Implements hook_views_data_alter().
 */
function slac_event_views_data_alter(&$data) {
  $data['views']['calendar_month_pager'] = array(
    'title' => t('Calendar months pager'),
    'help' => t('Allows to scroll back and forward for months.'),
    'area' => array(
      'handler' => 'views_handler_slac_events_calendar_months_pager',
    ),
  );
  $data['views']['calendar_footer'] = array(
    'title' => t('Calendar footer'),
    'help' => t('Display Month / Day view links.'),
    'area' => array(
      'handler' => 'views_handler_slac_events_calendar_footer',
    ),
  );
  $data['views']['calendar_main_area_title'] = array(
    'title' => t('Calendar main area title'),
    'help' => t('Display title for a calendar main area.'),
    'area' => array(
      'handler' => 'views_handler_slac_events_calendar_main_area_title',
    ),
  );
  $data['views']['calendar_header_content'] = array(
    'title' => t('Calendar header content'),
    'help' => t('Display content for the events calendar header.'),
    'area' => array(
      'handler' => 'views_handler_slac_events_calendar_header_content',
    ),
  );
  $data['views']['calendar_mini_pager'] = array(
    'title' => t('Minicalendar pager'),
    'help' => t('Allows to scroll back and forward for months.'),
    'area' => array(
      'handler' => 'views_handler_slac_events_calendar_mini_pager',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function slac_event_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['calendar_teaser'] = array(
    'label' => 'Calendar teaser',
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_views_pre_view().
 */
function slac_event_views_pre_view(&$view) {
  $arg0 = arg(0);
  $arg3 = arg(3);
  if ($view->name == 'events' && $view->current_display == 'panel_pane_1') {
    if ($arg0 == SLAC_EVENT_EVENTS_PAGE_URI && !empty($arg3)
      && isset($view->display['panel_pane_1']->handler->options['filters']['field_slac_event_date_value'])) {
      $view_filters = $view->display['panel_pane_1']->handler->options['filters'];
      if (isset($view_filters['field_slac_event_date_value'])) {
        unset($view_filters['field_slac_event_date_value']);
      }
      $view->display_handler->override_option('filters', $view_filters);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function slac_event_views_pre_render(&$view) {
  $arg0 = arg(0);
  $arg3 = arg(3);
  $url_date_with_day = _slac_event_get_date_from_url_with_day();
  if ($view->name == 'events' && $view->current_display == 'panel_pane_1' && !$url_date_with_day) {
    $view->empty['area']->options['content'] = t('No events planned for this month.');
    if ($arg0 == SLAC_EVENT_EVENTS_PAGE_URI && empty($arg3)) {
      $view->empty['area']->options['content'] = t('No events planned for next months.');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function slac_event_views_query_alter(&$view) {
  $arg0 = arg(0);
  $arg3 = arg(3);
  if ($view->name == 'events' && $view->current_display == 'panel_pane_1') {
    if ($arg0 == SLAC_EVENT_EVENTS_PAGE_URI && empty($arg3)) {
      unset($view->query->where['date']);
      $pager = array(
        'type' => 'full',
        'options' => array(
          'items_per_page' => 10,
          'total_pages' => 1,
        ),
      );
      $handler = &$view->display['panel_pane_1']->handler;
      $handler->set_option('pager', $pager);
      $view->display_handler->handlers['header'] = array();
    }
  }
}

/**
 * Prepare argument for Event view of main content area (list of events).
 *
 * Should either pass url argument or current date in format 2014-01.
 */
function _slac_event_get_date_argument_events_main_content() {
  $url_date_with_day = _slac_event_get_date_from_url_with_day();
  if (!empty($url_date_with_day)) {
    return $url_date_with_day;
  }

  return _slac_event_get_date_from_url_month_only();
}

/**
 * Prepare argument for Event view of mini calendar.
 *
 * Should either pass url argument or current date in format 2014-01.
 */
function _slac_event_get_date_argument_events_calendar($type = 'month') {
  $date_format = 'Y-m';
  if ($type == 'week') {
    $date_format = 'Y-\WW';
  }
  elseif ($type == 'day') {
    $date_format = 'Y-m-d';
  }
  if ($date = _slac_event_get_current_date($type)) {
    // PHP weeks start on Monday, but the Calendar is Sunday -> Saturday.
    if ($type == 'week') {
      $date = $date + 60 * 60 * 24;
    }
    return date($date_format, $date);
  }
  elseif (arg(0) == SLAC_EVENT_EVENTS_PAGE_URI) {
    $url_date = _slac_event_get_date_argument_events_main_content();
    return _slac_event_convert_date_with_day_to_date_without_day($url_date);
  }
}

/**
 * Return date for Calendar's pager. It can be either arg(1) in case we are on events
 * page, or date of the event if we are on full node view page.
 */
function _slac_event_get_current_date($type = 'month') {
  if ($date = _slac_event_get_date_from_event_node_with_day()) {
    return $date;
  }
  elseif ($type == 'month') {
    $date = _slac_event_get_date_from_url_month_only();
    return strtotime($date);
  }
  elseif ($type == 'week' || $type == 'day') {
    $date = _slac_event_get_date_from_url_month_and_day();
    return strtotime($date);
  }
}

function _slac_event_get_date_from_event_node_with_day() {
  if ($node = menu_get_object()) {
    if ($node->type === 'event') {
      if ($dates = field_get_items('node', $node, 'field_slac_event_date')) {
        return strtotime($dates[0]['value']);
      }
    }
  }
}

function _slac_event_get_date_from_url_month_only() {
  $arg0 = arg(0);
  $arg3 = arg(3);
  if ($arg0 == SLAC_EVENT_EVENTS_PAGE_URI) {
    if (!empty($arg3) && preg_match('/^(\d+)-(\d+)/', $arg3)) {
      return $arg3;
    }
  }
  return format_date(REQUEST_TIME, 'custom', 'Y-m');
}

function _slac_event_get_date_from_url_month_and_day() {
  $arg0 = arg(0);
  $arg3 = arg(3);
  if ($arg0 == SLAC_EVENT_EVENTS_PAGE_URI) {
    if (!empty($arg3) && preg_match('/^(\d+)-(\d+)-(\d+)/', $arg3)) {
      return $arg3;
    }
  }
  return format_date(REQUEST_TIME, 'custom', 'Y-m-d');
}

function _slac_event_get_date_from_url_with_day() {
  $arg0 = arg(0);
  $arg3 = arg(3);
  if ($arg0 == SLAC_EVENT_EVENTS_PAGE_URI) {
    if (!empty($arg3) && preg_match('/^(\d+)-(\d+)-(\d+)$/', $arg3)) {
      return $arg3;
    }
  }
}

function _slac_event_convert_date_with_day_to_date_without_day($date_string) {
  return date('Y-m', strtotime($date_string));
}

/**
 * Implements hook_panels_post_render().
 */
function slac_event_panels_post_render($display, $renderer) {
  // If an event node is being viewed, add a link to its iCalendar display. Now
  // normally, we'd do this in hook_node_view, easy peasy. But no, because this
  // site uses Panels, and Panels doesn't have much respect for standard core
  // hooks. So instead, I use this undocumented Panels hook. Is this the right
  // way to do this? Asciishrug. Panels is *never* the right way to do
  // *anything,* but here we are, so here we go.
  if (isset($display->context['argument_entity_id:node_1'])
    && $display->context['argument_entity_id:node_1']->data->type === 'event'
  ) {
    $event_ics = url("event/{$display->context['argument_entity_id:node_1']->data->nid}/calendar.ics",
      array('absolute' => TRUE)
    );
    drupal_add_html_head_link(array(
      'rel' => 'icalendar',
      'href' => $event_ics,
      'type' => 'text/icalendar',
    ));

    // Hmm, the iCalendar approach isn't giving us enough info. Let's try this
    // silly trick.
    $blob = array();
    foreach (_slac_event_fields_to_export() as $field) {
      if (isset($display->context['argument_entity_id:node_1']->data->{$field})) {
        $data = $display->context['argument_entity_id:node_1']->data->{$field};
        // Do some special-case processing of the image field
        if ($field === 'field_event_image') {
          foreach (array_keys($data) as $langcode) {
            foreach (array_keys($data[$langcode]) as $idx) {
              $full_url = file_create_url($data[$langcode][$idx]['uri']);
              // Reduce the data to only essential fields
              $fields_to_keep = array('uuid', 'filename', 'field_file_image_alt_text', 'field_file_image_title_text', 'field_file_image_description');
              foreach (array_keys($data[$langcode][$idx]) as $file_field) {
                if (!in_array($file_field, $fields_to_keep)) {
                  unset($data[$langcode][$idx][$file_field]);
                }
              }
              // Add on the url field so we can download the file.
              $data[$langcode][$idx]['url'] = $full_url;
            }
          }
        }
        $blob[$field] = $data;
      }
    }
    $tag = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'slac-event-data',
        'content' => drupal_json_encode($blob),
      ),
    );
    drupal_add_html_head($tag, 'slac-event-data');
  }
}

/**
 * Helper function to store an array of event fields for exporting/importing.
 */
function _slac_event_fields_to_export() {
  return array(
    'title',
    'field_slac_event_link',
    'field_slac_event_date',
    'field_location',
    'field_slac_event_contact',
    'body',
    'field_slac_event_category',
    'field_slac_event_audience',
    'field_slac_event_scientific_area',
    'field_slac_event_organization',
    'field_slac_event_related_links',
/*     'field_event_tags', */
    'field_event_image',
  );
}

/**
 * Implements hook_date_ical_export_vevent_alter().
 *
 * Add image information as X- properties.
 */
function slac_event_date_ical_export_vevent_alter(&$vevent, $view, $event_array) {
  preg_match('/^calendar\.(\d+)/', $event_array['uid'], $matches);
  if (isset($matches[1])) {
    if ($node = node_load($matches[1])) {
      if ($images = field_get_items('node', $node, 'field_event_image')) {
        $url = file_create_url($images[0]['uri']);
        $vevent->setProperty('X-IMG-UUID', $images[0]['uuid']);
        $vevent->setProperty('X-IMG-URL', $url);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function slac_event_theme($existing, $type, $theme, $path) {
  if ($type === 'module') {
    return array(
      'slac_event_calendar_header_content' => array(
        'template' => 'calendar-header-content',
        'path' => $path . '/theme',
        'type' => 'theme',
        'variables' => array(
          'pager' => NULL,
          'date_display' => NULL,
        ),
      ),
      'slac_event_view_toggle_content' => array(
        'template' => 'event-view-toggle',
        'path' => $path . '/theme',
        'type' => 'theme',
        'variables' => array(
          'switch' => NULL,
          'display_modes' => NULL,
        ),
      ),
      'slac_events_calendar_mini_pager' => array(
        'template' => 'calendar-mini-pager',
        'path' => $path . '/theme',
        'type' => 'theme',
        'variables' => array(
          'pager' => NULL,
          'date_display' => NULL,
        ),
      ),
    );
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function slac_event_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements template_preprocess_calendar_datebox().
 */
function slac_event_preprocess_calendar_datebox(&$vars) {
  // Add a link to the day view for days that have events.
  if (!empty($vars['selected'])) {
    $vars['link'] = l($vars['day'], 'events/day/list/' . $vars['date']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds "external" tag when importing with og_tag.
 */
function slac_event_form_og_tags_form_importer_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
    $term = slac_event_get_external_term();
    // Term name, not TID, because the value entered here drops right into the
    // autocomplete text field as if it had been typed directly by a user.
    $form['field_event_tags'][LANGUAGE_NONE]['#default_value'] = $term->name;
  }
}

/**
 * Helper function that returns the "external" term.
 *
 * @return object
 *   The loaded "external" term object.
 */
function slac_event_get_external_term() {
  $terms = taxonomy_get_term_by_name('external', 'event_tags');
  // Create a new term if no existing term was found.
  if (empty($terms)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('event_tags');
    $term = new stdClass();
    $term->vid = $vocabulary->vid;
    $term->name = 'External';
    taxonomy_term_save($term);
  }
  // Use the existing term.
  else {
    $term = array_shift($terms);
  }
  return $term;
}
